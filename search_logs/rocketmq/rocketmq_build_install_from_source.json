[
    {
        "url": "https://rocketmq.apache.org/docs/connect/03RocketMQ%20Connect%20Quick%20Start/",
        "analysis": "Instructions for installing/building the project 'rocketmq' on a Debian/Ubuntu Linux system from source code:\n\n1. Preparation:\n   - Linux/Unix/Mac 64bit JDK 1.8+\n   - Maven 3.2.x+\n   - Start RocketMQ (Either RocketMQ 4.x or RocketMQ 5.x)\n\n2. Build Connector Runtime:\n   - git clone https://github.com/apache/rocketmq-connect.git\n   - cd rocketmq-connect\n   - export RMQ_CONNECT_HOME=`pwd`\n   - mvn -Prelease-connect -Dmaven.test.skip=true clean install -U\n\n3. Run Connector Worker in Standalone Mode:\n   - Modify the connect-standalone.conf file to configure RocketMQ connection address and other information.\n   - cd $RMQ_CONNECT_HOME/distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n   - vim conf/connect-standalone.conf\n   - Start Connector Worker in Standalone Mode: sh bin/connect-standalone.sh -c conf/connect-standalone.conf &\n\n4. Start Source Connector:\n   - Create Source File and Write Test Data\n   - Start Source Connector: curl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/fileSourceConnector\n\n5. Start Sink Connector:\n   - Start sink connector: curl -X POST -H \"Content-Type: application/json\" http://127.0.0.1:8082/connectors/fileSinkConnector\n\n6. Stop connector:\n   - Stop connector using RESTful commands: curl http://127.0.0.1:8082/connectors/fileSinkConnector/stop\n\n7. Stop the Worker process:\n   - cd $RMQ_CONNECT_HOME/distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT\n   - sh bin/connectshutdown.sh\n\n8. Log directory:\n   - View log directory using: ls $HOME/logs/rocketmqconnect\n\n9. Configuration File Instructions:\n   - Modify RESTful port, storeRoot path, nameserver address, and other information based on usage in conf/connect-standalone.conf\n\nNote: The project includes the code for rocketmq-connect-sample by default, so there is no need to build the rocketmq-connect-sample plugin separately."
    },
    {
        "url": "https://rocketmq.apache.org/docs/quickStart/01quickstart/",
        "analysis": "To install or build the project 'rocketmq' on a Debian/Ubuntu Linux system from source code, the following steps need to be followed:\n\n1. System Requirements:\n   - 64-bit OS, Linux/Unix/macOS is recommended\n   - 64-bit JDK 1.8+\n\n2. Download Apache RocketMQ source package (RocketMQ 5.3.1 source package):\n   - Extract the source package of RocketMQ 5.3.1\n   - Compile and build the binary executables using the following commands:\n     ```\n     $ unzip rocketmq-all-5.3.1-source-release.zip\n     $ cd rocketmq-all-5.3.1-source-release/\n     $ mvn -Prelease-all -DskipTests -Dspotbugs.skip=true clean install -U\n     $ cd distribution/target/rocketmq-5.3.1/rocketmq-5.3.1\n     ```\n\n3. Start NameServer:\n   - After installation, start the NameServer using the following commands:\n     ```\n     $ nohup sh bin/mqnamesrv &\n     $ tail -f ~/logs/rocketmqlogs/namesrv.log\n     ```\n\n4. Start Broker and Proxy:\n   - After NameServer startup, start the Broker and Proxy using the following commands:\n     ```\n     $ nohup sh bin/mqbroker -n localhost:9876 --enable-proxy &\n     $ tail -f ~/logs/rocketmqlogs/proxy.log\n     ```\n\n5. Send and Receive Messages with tools:\n   - Set the nameserver address to system environment variables NAMESRV_ADDR\n   - Use tools.sh to send and receive messages\n\n6. Send and Receive Messages with SDK:\n   - Create a Java project and add SDK dependency to pom.xml\n   - Create topics using mqadmin cli tools\n   - Create programs to send and receive messages using SDK\n\n7. Shutdown Servers:\n   - After finishing the practice, shut down the service using the following commands:\n     ```\n     $ sh bin/mqshutdown broker\n     $ sh bin/mqshutdown namesrv\n     ```\n\nIf you need to install any additional packages or dependencies, please refer to the RocketMQ installation documentation or the system package manager (e.g., apt) to install the required software."
    },
    {
        "url": "https://github.com/apache/rocketmq-client-cpp/blob/master/build.sh",
        "analysis": "The webpage does not provide instructions on how to install or build the 'rocketmq' project on a Debian/Ubuntu Linux system from the source code."
    },
    {
        "url": "https://github.com/apache/rocketmq/blob/develop/BUILDING",
        "analysis": "The webpage provides the following instructions for building Apache RocketMQ from the source code on a Debian/Ubuntu Linux system:\n\n1. Prerequisites:\n- JDK 1.7+ is required.\n- Maven version 3.0.3 or later is required. Instructions for Maven installation and configuration can be found at: http://maven.apache.org/run-maven/index.html\n\n2. Run test cases:\n- Execute the following command to compile and run test cases of each component:\n```\n$ mvn test\n```\n\n3. Import projects to Eclipse IDE:\n- Generate eclipse project files by running:\n```\n$ mvn -U eclipse:eclipse\n```\n- Import the project into Eclipse by specifying the root directory via: [File] > [Import] > [Existing Projects into Workspace].\n\n4. Build distribution packages:\n- Execute the following command to build tar.gz packages and install JAR into the local repository:\n```\n$ mvn -Prelease-all -DskipTests clean install -U\n```"
    }
]