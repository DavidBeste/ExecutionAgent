[
    {
        "url": "https://branyang.gitbooks.io/tfdocs/content/install/install_sources.html",
        "analysis": "The webpage provides detailed instructions on how to install or build TensorFlow on a Debian/Ubuntu Linux system from source code. Here are the structured steps and requirements extracted from the webpage:\n\n1. Choose the type of TensorFlow to install:\n   - TensorFlow with CPU support only\n   - TensorFlow with GPU support\n\n2. Clone the TensorFlow repository:\n   - Issue the command: `$ git clone https://github.com/tensorflow/tensorflow`\n   - Optionally, switch to a specific branch by using the command: `$ git checkout Branch`\n\n3. Prepare environment for Linux:\n   - Install build tools: bazel\n   - Install TensorFlow Python dependencies: numpy, dev, pip, wheel\n   - Optional: Install NVIDIA packages for GPU support\n\n4. Optional: Install TensorFlow for GPU prerequisites (if building with GPU support)\n   - Install NVIDIA hardware and software requirements\n   - Install CUDA Toolkit, cuDNN, and libcupti-dev using the provided commands\n\n5. Configure the installation by running the `configure` script in the TensorFlow source tree. Specify TensorFlow dependencies, build configuration options, and GPU-related information.\n\n6. Build the pip package:\n   - For TensorFlow with CPU support: `$ bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package`\n   - For TensorFlow with GPU support: `$ bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package`\n\n7. Install the pip package:\n   - Run the build script: `$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg`\n   - Install the generated .whl file using pip install\n\nPlease note that the webpage does not provide specific commands for installing TensorFlow on a Debian/Ubuntu Linux system, but it does offer comprehensive information on building and installing TensorFlow from source code."
    },
    {
        "url": "https://gist.github.com/kmhofmann/e368a2ebba05f807fa1a90b3bf9a1e03",
        "analysis": "The webpage provides detailed instructions on building TensorFlow from source for Ubuntu 20.04. Here is a structured list of steps and requirements to install or build TensorFlow on a Debian/Ubuntu Linux system from the provided source code:\n\n1. Prerequisites:\n   - NVIDIA driver v450.57\n   - CUDA 11.0.2\n   - cuDNN v8.0.2.39\n   - GCC 9.3.0\n   - TensorFlow v2.3.0\n\n2. System Packages:\n   - Python:\n     ```\n     $ sudo apt install python3-dev python3-pip python3-venv\n     ```\n\n3. Installing Bazel:\n   - Install Bazel 3.1.0 via apt:\n     ```\n     $ sudo apt install curl gnupg\n     $ curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -\n     $ echo \"deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list\n     $ sudo apt update && sudo apt install bazel-3.1.0\n     ```\n\n4. Compiling Bazel from source:\n   - Install prerequisite dependencies:\n     ```\n     $ sudo apt-get install build-essential openjdk-11-jdk python zip unzip\n     ```\n   - Build Bazel from source:\n     ```\n     $ wget https://github.com/bazelbuild/bazel/releases/download/3.1.0/bazel-3.1.0-dist.zip\n     $ mkdir bazel-3.1.0\n     $ unzip -d ./bazel-3.1.0 bazel-3.1.0-dist.zip\n     $ cd bazel-3.1.0\n     $ env EXTRA_BAZEL_ARGS=\"--host_javabase=@local_jdk//:jdk\" bash ./compile.sh\n     ```\n\n5. Building TensorFlow:\n   - Clone TensorFlow sources:\n     ```\n     $ git clone https://github.com/tensorflow/tensorflow\n     $ cd tensorflow\n     $ git checkout v2.3.0\n     ```\n   - Configure and build TensorFlow:\n     ```\n     $ python3 -m venv ~/.virtualenvs/tf_dev\n     $ source ~/.virtualenvs/tf_dev/bin/activate\n     $ pip install -U pip six 'numpy<1.19.0' wheel setuptools mock 'future>=0.17.1'\n     $ pip install -U keras_applications --no-deps\n     $ pip install -U keras_preprocessing --no-deps\n     $ ./configure\n     $ bazel build --config=opt -c opt //tensorflow/tools/pip_package:build_pip_package\n     ```\n   - Build and install the Python package:\n     ```\n     $ ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\n     $ pip install /tmp/tensorflow_pkg/tensorflow-2.3.0-cp38-cp38-linux_x86_64.whl\n     ```\n\n6. Testing the Installation:\n   - Check TensorFlow installation:\n     ```\n     $ python -c \"import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))\"\n     ```\n\nThese steps should help in successfully building and installing TensorFlow from the provided source code on a Debian/Ubuntu Linux system."
    },
    {
        "url": "https://www.tensorflow.org/install/source_windows",
        "analysis": "The webpage does not provide instructions relevant to installing or building the project 'tensorflow' on a Debian/Ubuntu Linux system from source code."
    },
    {
        "url": "https://www.tensorflow.org/install/source",
        "analysis": "The webpage provides detailed instructions on how to build TensorFlow from source on Debian/Ubuntu Linux system. Here is a structured list of steps and requirements:\n\n1. Install Python and the TensorFlow package dependencies:\n   - Ubuntu: sudo apt install python3-dev python3-pip\n   - macOS: Requires Xcode 9.2 or later. Install using Homebrew: brew install python\n   - Install TensorFlow pip package dependencies: pip install -U --user pip\n\n2. Install Bazel:\n   - Install Bazelisk to automatically download the correct Bazel version for TensorFlow\n   - Add Bazelisk as the bazel executable in your PATH\n\n3. Install Clang (recommended, Linux only):\n   - Install LLVM/Clang 17: sudo apt-get update && sudo apt-get install -y llvm-17 clang-17\n   - Update the path to use the installed Clang/LLVM binaries\n\n4. Download the TensorFlow source code:\n   - Clone the TensorFlow repository using Git: git clone https://github.com/tensorflow/tensorflow.git\n\n5. Configure the build:\n   - Run the ./configure script from the repository's root directory to adjust settings\n   - Answer build configuration questions as prompted\n   - Check the generated Clang + LLVM 17 binaries version\n\n6. Build and install the pip package:\n   - Specify build options using Bazel commands\n   - Build TensorFlow pip package by running appropriate Bazel commands based on your requirements\n   - Install the generated .whl file using pip install command\n\n7. Optional: Install GPU support (Linux only):\n   - Refer to the GPU support guide for additional steps\n\nOverall, the webpage provides comprehensive instructions for building TensorFlow from source on a Debian/Ubuntu Linux system."
    },
    {
        "url": "https://medium.com/analytics-vidhya/building-tensorflow-from-source-step-by-step-guide-1075ef2d9356",
        "analysis": "The webpage provides detailed instructions on building Tensorflow from source on a Debian/Ubuntu Linux system. \n\nInstructions:\n1. Set up the build environment by using the tensorflow docker development image.\n   - Run the command: docker pull tensorflow/tensorflow:devel-py3\n   - Run the command: docker run -it -w /tensorflow -v <host_directory>:/share tensorflow/tensorflow:devel-py3 bash\n\n2. Get the latest tensorflow version and finish environment setup.\n   - Inside the container or local folder, run the following commands:\n       - cd /tensorflow_src/\n       - git pull\n       - git checkout r2.1\n       - Install python dependencies for the build:\n            - pip3 install six numpy wheel\n            - pip3 install keras_applications==1.0.6 --no-deps\n            - pip3 install keras_preprocessing==1.0.5 --no-deps\n\n3. Configure bazel and understand flags for the target CPU.\n   - Start bazel configuration by running: python configure.py\n   - Answer the questions and put the proper compilation flags at the end based on the target CPU.\n\n4. Build with bazel for the target CPU.\n   - Execute the build commands using the flags from step 3. The build process may take around 3.5 hours.\n\n5. Wrap the binaries with a python setup wheel file.\n   - Generate the wheel file to the shared directory by running: ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /share\n\n6. Install Tensorflow and verify with hello-world example.\n   - Install Tensorflow in the target environment: python3.6 -m pip install /tensorflow-2.1.0-cp36-cp36m-linux_x86_64.whl\n   - Verify the installation using the provided hello-world examples for TensorFlow version 2.XX and 1.XX.\n\nIf you encounter any issues during the build process, the webpage provides troubleshooting steps for common problems such as updating Bazel, resolving missing API versions, and fixing build flag errors."
    }
]