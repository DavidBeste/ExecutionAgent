{
    "1": {
        "static_header": "Step 1: Determine the main language of the project (e.g, Python, Java...) and its version (e.g, Python3.8, java 17, C99...)\n",
        "step_line": "\n            - Use linux_terminal to list files and identify relevant files.\n            - Read relevant files using read_file.\n            ",
        "result_of_step": []
    },
    "2": {
        "static_header": "Step 2: based on the projects language, version and other available information, create a container with an appropriate image that is suitable to install the project within.",
        "step_line": "\n - Use 'write_to_file' to create the 'Dockerfile'.\n - The docker file that you create should always clone the target repository. Thus, you should never try to copy files from host to docker image (use of command COPY is prohibited in dockerfile script.)\n - The script should enable pulling a Docker image, cloning the target repository inside it, installing dependencies, and running the project. Use the tool 'write_to_file'.\n Example template of Dockerfile:\n                FROM python:3.10-slim  # this image was pulled for a python project, please change it depending on the projects language and dependencies\n\n                # Important to add the following two lines to avoid interruptive message of tzdata\n               ENV TZ=Europe/Berlin || exit 0\n              RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone || exit 0\n\n               # Install git, gcc, bash, and other necessary build tools\n                RUN apt-get update &&                     apt-get install -y git gcc bash &&                     apt-get clean &&                     rm -rf /var/lib/apt/lists/* || exit 0\n\n                WORKDIR /app\n\n                # Clone the repository\n                RUN git clone project_git_url || exit 0\n\n                WORKDIR /app/project_name\n\n                CMD [\"bash\"]\n            - notice how \"|| exit 0\" is added to some steps to avoid building failure in case of error which you should do when necessary.\n            - Once the Dockerfile is create, an automatic attempt to execute the dockerfile and create the image will start. You will receive a message about the success or failure of creating the docker image based on your provided file.\n            - If the docker image is created successfully, all subsequent commands that you suggest would be executed within the docker container automatically.\n            ",
        "result_of_step": []
    },
    "3": {
        "static_header": "Step 3: Gather project dependencies (required language SDK, packages, requirements...)\n",
        "step_line": "\n -Use already available information or obtain more from other files, links...",
        "result_of_step": []
    },
    "4": {
        "static_header": "Step 4: Setup the environment such as adding some modules to PATH directive (e.g, Java Home) or by creating a virtual environment if the language is Python and so on...\n",
        "step_line": "Use linux_terminal to configure the environment.\n",
        "result_of_step": []
    },
    "5": {
        "static_header": "Step 5: Install dependencies\n",
        "step_line": "Install the dependencies collected in step 2 by executing commands through 'linux_terminal'. If any problems arise, address them using the 'linux_terminal'.\n",
        "result_of_step": []
    },
    "6": {
        "static_header": "Step 6: Identify the test framework and run tests.\n",
        "step_line": "\n - Make sure the testing framework is installed and the tests folder/files are located and then launch tests using linux_terminal",
        "result_of_step": []
    },
    "7": {
        "static_header": "Step 7: Create a bash script for installation steps.\n",
        "step_line": "Use write_to_file to save commands into SETUP_AND_INSTALL.sh.\n",
        "result_of_step": []
    }
}