{
    "1": {
        "static_header": "Step 1: Determine the main language of the project (e.g, Python, Java...) and its version (e.g, Python3.8, java 17, C99...)\n",
        "step_line": "\n            - Use linux_terminal to list files and identify relevant files.\n            - Read relevant files using read_file.\n            ",
        "result_of_step": []
    },
    "2": {
        "static_header": "Step 2: based on the projects language and version, create a Dockerfile with an appropriate docker image that is suitable to install the project within.",
        "step_line": "\n            - Use 'write_to_file' to create the 'Dockerfile'.\n            - Some projects already have a Dockerfile which you might directly use by reading and writing a similar one.\n            - The docker file that you create should always clone the target repository. Thus, you should never try to copy files from host to docker image (use of commadn COPY is prohibited in dockerfile script.)\n            - The yaml scripts of workflows under .github/workflows (if available) can be usefull to get the steps required to install a project. The workflow that does the test might be named test.yml or build.yml or even linux.yml for example to denote testing on linux. Reading and learning from such files is a good idea.\n            - The script should enable pulling a Docker image, cloning the target repository inside it, installing dependencies, and running the project. Use the tool 'write_to_file'.\n                Example template of Dockerfile:\n                FROM python:3.10-slim  # this image was pulled for a python project, please change it depending on the projects language and dependencies\n\n                # Install git, gcc, bash, and other necessary build tools\n                RUN apt-get update &&                     apt-get install -y git gcc bash &&                     apt-get clean &&                     rm -rf /var/lib/apt/lists/* || exit 0\n\n                WORKDIR /app\n\n                # Clone the repository\n                RUN git clone project_git_url || exit 0\n\n                WORKDIR /app/project_name\n\n                CMD [\"bash\"]\n            - notice how \"|| exit 0\" is added to some steps to avoid building failure in case of error which you should do when necessary.\n            - Once the Dockerfile is create, an automatic attempt to execute the dockerfile and create the image will start. You will receive a message about the success or failure of creating the docker image based on your provided file.\n            - If the docker image is created successfully, all subsequent commands that you suggest would executed within the docker container automatically.\n            ",
        "result_of_step": []
    },
    "3": {
        "static_header": "Step 3: Gather project dependencies (required language SDK, packages, requirements...)\n",
        "step_line": "\n            - Use linux_terminal to list files and identify relevant files.\n            - Read relevant files using read_file.\n            ",
        "result_of_step": []
    },
    "4": {
        "static_header": "Step 4: Setup the environment such as adding some modules to PATH directive (e.g, Java Home) or by creating a virtual environment if the language is Python and so on...\n",
        "step_line": "Use linux_terminal to configure the environment.\n",
        "result_of_step": []
    },
    "5": {
        "static_header": "Step 5: Install dependencies\n",
        "step_line": "Install the dependencies collected in step 2 by executing commands through 'linux_terminal'. If any problems arise, address them using the 'linux_terminal'.\n",
        "result_of_step": []
    },
    "6": {
        "static_header": "Step 6: Identify the test framework and run tests.\n",
        "step_line": "\n            - List and read relevant files to determine the test framework.\n            - Use linux_terminal to launch tests and address issues.\n            ",
        "result_of_step": []
    },
    "7": {
        "static_header": "Step 7: Create a bash script for installation steps.\n",
        "step_line": "Use write_to_file to save commands into SETUP_AND_INSTALL.sh.\n",
        "result_of_step": []
    },
    "8": {
        "static_header": "Step 8: Measure the test suite coverage\n",
        "step_line": "Install code coverage tool (e.g, pycov for python) using 'linux_terminal' and use it to measure code coverage when running test cases. Save code coverage results into the file 'coverage_results.txt' using 'write_to_file.'\nWhen writing test results, use the following template:\n            Tests run: X\n            Tets passed: Y\n            Tests failed: Z\n            Tests skipped: V\n            Average coverage: N%\n            \n            Replace the symbols with concrete values from the results of running tests.\n            ",
        "result_of_step": []
    }
}