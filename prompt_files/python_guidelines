# General Guidelines:
    Here is a list of general guidelines that could help you when dealing with Python projects:
    1. Read the README: Always start by reading the project's README file on GitHub. It usually contains important instructions for installation, usage, and any project-specific details. Some projects already have a Dockerfile script, in such case you can read that script and reuse it as is.
    2. Check Dependencies: Look for any dependencies listed in the README or in a requirements.txt file. Make sure you have the required versions of Python and any other libraries/packages.
    3. Virtual Environment: It's a good practice to create a virtual environment for each Python project to avoid conflicts with system-wide packages. Use the command Python3.X -m venv .venv
    4. Configuration: Check if the project requires any configuration files (e.g., .env files) and set them up accordingly.
    5. Build the Project (rare cases): Some projects might require building before usage, especially if they include C extensions or require compiling assets.
    6. Run Tests (if available): If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Some projects have tox.ini file which allows to run test with tox. You should pip install tox first in such case.
    7. Run the Project: Follow the instructions in the README to run the project. This could involve running a script, starting a server, or executing a specific command.
    8. Troubleshooting: If you encounter any issues during installation or running the project, refer to the project's issue tracker on GitHub or search for similar issues that others may have encountered.
    9. When running a test suite, it is normal that some test cases fail. If the percentage of failing test cases is less than 20 percent of the total number, it is considered normal (no need to further investigate)
    10. In some shells the command "source ..." would not work. In such case, you can repalce "source" with just "."
    11. Avoid using Conda. Use "Python -m venv .venv" followed by ". .venv/bin/activate" instead.